===============================
MCMC
===============================



.. image:: https://img.shields.io/travis/hudalao/mcmc.svg
        :target: https://travis-ci.org/hudalao/mcmc

.. image:: https://readthedocs.org/projects/mcmc/badge/?version=latest
        :target: https://mcmc.readthedocs.io/en/latest/?badge=latest
        :alt: Documentation Status

.. image:: https://pyup.io/repos/github/hudalao/mcmc/shield.svg
        :target: https://pyup.io/repos/github/hudalao/mcmc/
        :alt: Updates

.. image:: https://coveralls.io/repos/github/hudalao/mcmc/badge.svg
        :target: https://coveralls.io/github/hudalao/mcmc


Markov Chain Monte Carlo


* Free software: MIT license
* Documentation: https://mcmc.readthedocs.io.


Features
--------

In this version, seven py file are included.

The main program is mcmc.py which has the functionality:
1.Creating a list storing every graphs at each time points, which generated by a Markov Chain Monta Carlo Method (Metripolis-Hastings Algorithm);

2.Ploting out the first N graphs, where N is smaller or eqaul to the total time points;

3.Finding the most possible graph which has the largest appearance times in the graph list;

4.Giving the expected number of edges connected to vertex 0;

5.Giving the expected number of edges in the entire graph;

6.Giving the expected maximum distance of the shortest path ina graph that connects vertex 0 to another vertex.

Two classes are included:

1.edge_oper;

2.connec_graph.

And four independent functions are included:

3.posi_assign;

4.theta;

5.Metripolis_Hastings;

6.plot_graph;

1.edge_oper: including all the edge operation related functions

a.weight_calc: returning the matrix storing the distance between each vertex pairs given the position of each vertex

b.ran_edge: returning the random edge created unifromly 

c.update_edges_list: Given the random created edge and edges list containing edges cannot be deleted which garantee the connected graph, return True if the edges list has been updated; return False if the edges list is unchanged. 
Meanwhile, adding the random edge if it is not exist; deleting it if it is already exist and not among the edges listcontaining edges connot be deleted;

d.edges_weighted: returning the edges with weight of the current graph given the weight matrix

2.connec_graph:

a. init_graph: creating the initial graph only connecting vertex 0 to other vertexes.

b. edges_keep: returning the edges list containing edges cannot be deleted which garantee the connected graph and its number of elements.

3. posi_assign: creating a 2D grid and picking N random points uniformly.

4. theta : calculating the theta function posted in the note.

5. Metripolis_Hastings: Using the Metripolis Hastings Algorithm to judge if the poposal graph accepted or not, if the proposal graph had been refected, the graph at next time point would be the same as the current graph.

6. plot_graph: ploting out the graph.The edges with weight bigger than 0.5 would be connected by solid line, other 
   edges would be connected by dash lines.

Credits
---------

This package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.

.. _Cookiecutter: https://github.com/audreyr/cookiecutter
.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage

